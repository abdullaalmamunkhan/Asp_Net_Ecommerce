// <auto-generated />
using System;
using DbModelsCore.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DbModelsCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211026171142_UpdateDatabaseTableNamey")]
    partial class UpdateDatabaseTableNamey
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DbModelsCore.Models.Admin.DBApplicationAccessLog", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("I_D")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AccessDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ACCESS_DATE_TIME");

                    b.Property<string>("ActionType")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("ACTION_TYPE");

                    b.Property<string>("ActivityName")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("ACTIVITY_NAME");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("ModuleName")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("MODULE_NAME");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("USER_ID");

                    b.Property<string>("UserIpHostName")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("USER_IP_HOST_NAME");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("USER_NAME");

                    b.HasKey("ID");

                    b.ToTable("APPLICATION_ACCESS_LOGS");
                });

            modelBuilder.Entity("DbModelsCore.Models.Admin.DBUser", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("I_D")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE_OF_BIRTH");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FULL_NAME");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LAST_NAME");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MOBILE");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PASSWORD");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("ROLE_ID");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_DATE");

                    b.HasKey("ID");

                    b.HasIndex("RoleId");

                    b.ToTable("USERS");
                });

            modelBuilder.Entity("DbModelsCore.Models.Admin.DBUserInfo", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("I_D")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_DATE");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("NID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("N_I_D");

                    b.Property<string>("NIDImageBack")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("N_I_D_IMAGE_BACK");

                    b.Property<string>("NIDImageFront")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("N_I_D_IMAGE_FRONT");

                    b.Property<string>("PermanentAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PERMANENT_ADDRESS");

                    b.Property<string>("PermanentApartment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PERMANENT_APARTMENT");

                    b.Property<string>("PermanentCity")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PERMANENT_CITY");

                    b.Property<string>("PermanentCountry")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PERMANENT_COUNTRY");

                    b.Property<string>("PermanentPostalCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PERMANENT_POSTAL_CODE");

                    b.Property<string>("PermanentState")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PERMANENT_STATE");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PROFILE_IMAGE");

                    b.Property<string>("TemporaryAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TEMPORARY_ADDRESS");

                    b.Property<string>("TemporaryApartment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TEMPORARY_APARTMENT");

                    b.Property<string>("TemporaryCity")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TEMPORARY_CITY");

                    b.Property<string>("TemporaryCountry")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TEMPORARY_COUNTRY");

                    b.Property<string>("TemporaryPostalCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TEMPORARY_POSTAL_CODE");

                    b.Property<string>("TemporaryState")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TEMPORARY_STATE");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_DATE");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("USER_ID");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("D_B_USER_INFO");
                });

            modelBuilder.Entity("DbModelsCore.Models.Admin.DBUserRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("I_D")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.HasKey("ID");

                    b.ToTable("USER_ROLE");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Super Admin"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Admin"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Vendor"
                        },
                        new
                        {
                            ID = 4,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Catalog.DBAttributeItemCategoryMap", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("I_D")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("CATEGORY_ID");

                    b.Property<long>("ItemAttributeId")
                        .HasColumnType("bigint")
                        .HasColumnName("ITEM_ATTRIBUTE_ID");

                    b.HasKey("ID");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ItemAttributeId");

                    b.ToTable("ATTRIBUTE_ITEM_CATEGORY_MAPS");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Catalog.DBCategoryAttributeMaper", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("I_D")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AttributeId")
                        .HasColumnType("bigint")
                        .HasColumnName("ATTRIBUTE_ID");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("CATEGORY_ID");

                    b.HasKey("ID");

                    b.HasIndex("AttributeId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CATEGORY_ATTRIBUTE_MAPERS");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Catalog.DBProductAttribute", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("I_D")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_DATE");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("NAME");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_DATE");

                    b.HasKey("ID");

                    b.ToTable("PRODUCT_ATTRIBUTES");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Catalog.DBProductAttributeItems", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("I_D")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_DATE");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("NAME");

                    b.Property<long>("ProductAttributeId")
                        .HasColumnType("bigint")
                        .HasColumnName("PRODUCT_ATTRIBUTE_ID");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_DATE");

                    b.HasKey("ID");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("ATTRIBUTE_ITEMS");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Catalog.DBProductCategory", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("I_D")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_DATE");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IMAGE_URL");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<bool>("IsShowOnHome")
                        .HasColumnType("bit")
                        .HasColumnName("IS_SHOW_ON_HOME");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("NAME");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("PARENT_ID");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_DATE");

                    b.HasKey("ID");

                    b.HasIndex("ParentId");

                    b.ToTable("CATEGORIES");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Catalog.DBProductTag", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("I_D")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_DATE");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("NAME");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_DATE");

                    b.HasKey("ID");

                    b.ToTable("PRODUCT_TAG");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Catalog.DBSliderImage", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("I_D")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_DATE");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("IMAGE_NAME");

                    b.Property<string>("ImageTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("IMAGE_TITLE");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("IMAGE_URL");

                    b.Property<bool>("ImageViewer")
                        .HasColumnType("bit")
                        .HasColumnName("IMAGE_VIEWER");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_DATE");

                    b.HasKey("ID");

                    b.ToTable("SLIDER_IMAGES");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Product.DBProduct", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("I_D")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminComment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ADMIN_COMMENT");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("CATEGORY_ID");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_DATE");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("float")
                        .HasColumnName("DISCOUNT_AMOUNT");

                    b.Property<double>("DiscountInPercent")
                        .HasColumnType("float")
                        .HasColumnName("DISCOUNT_IN_PERCENT");

                    b.Property<string>("FeatureImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FEATURE_IMAGE");

                    b.Property<string>("FullDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FULL_DESCRIPTION");

                    b.Property<string>("GTIN")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("G_T_I_N");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<bool>("IsDisplayAvaiable")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DISPLAY_AVAIABLE");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DRAFT");

                    b.Property<bool>("IsEnableShop")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ENABLE_SHOP");

                    b.Property<bool>("IsMultipleWareHouse")
                        .HasColumnType("bit")
                        .HasColumnName("IS_MULTIPLE_WARE_HOUSE");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit")
                        .HasColumnName("IS_NEW");

                    b.Property<bool>("IsOpenReview")
                        .HasColumnType("bit")
                        .HasColumnName("IS_OPEN_REVIEW");

                    b.Property<bool>("IsReturnAble")
                        .HasColumnType("bit")
                        .HasColumnName("IS_RETURN_ABLE");

                    b.Property<bool>("IsShowOnHome")
                        .HasColumnType("bit")
                        .HasColumnName("IS_SHOW_ON_HOME");

                    b.Property<bool>("IsTrackStoke")
                        .HasColumnType("bit")
                        .HasColumnName("IS_TRACK_STOKE");

                    b.Property<double>("MinimumStokeLimit")
                        .HasColumnType("float")
                        .HasColumnName("MINIMUM_STOKE_LIMIT");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<double>("NewPrice")
                        .HasColumnType("float")
                        .HasColumnName("NEW_PRICE");

                    b.Property<double>("OldPrice")
                        .HasColumnType("float")
                        .HasColumnName("OLD_PRICE");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("S_K_U");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SHORT_DESCRIPTION");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SLUG");

                    b.Property<double>("StokeAmount")
                        .HasColumnType("float")
                        .HasColumnName("STOKE_AMOUNT");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_DATE");

                    b.HasKey("ID");

                    b.HasIndex("CategoryId");

                    b.ToTable("PRODUCTS");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Product.DBProductAttributeItemMap", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("I_D")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AttributeId")
                        .HasColumnType("bigint")
                        .HasColumnName("ATTRIBUTE_ID");

                    b.Property<long>("ItemAttributeId")
                        .HasColumnType("bigint")
                        .HasColumnName("ITEM_ATTRIBUTE_ID");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("PRODUCT_ID");

                    b.HasKey("ID");

                    b.HasIndex("ItemAttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("PRODUCT_ATTRIBUTE_ITEM_MAPS");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Product.DBProductFeedback", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("I_D")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_DATE");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MESSAGE");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<double>("Rating")
                        .HasColumnType("float")
                        .HasColumnName("RATING");

                    b.Property<int>("ReplyID")
                        .HasColumnType("int")
                        .HasColumnName("REPLY_I_D");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_DATE");

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("USER_I_D");

                    b.HasKey("ID");

                    b.HasIndex("ProductId");

                    b.ToTable("PRODUCT_FEEDBACKS");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Product.DBProductTagMap", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("I_D")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("TAG_ID");

                    b.HasKey("ID");

                    b.HasIndex("ProductId");

                    b.HasIndex("TagId");

                    b.ToTable("PRODUCT_TAG_MAPS");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Product.DBProdutImageMap", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("I_D")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IMAGE_U_R_L");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("PRODUCT_ID");

                    b.HasKey("ID");

                    b.HasIndex("ProductId");

                    b.ToTable("PRODUT_IMAGE_MAPS");
                });

            modelBuilder.Entity("DbModelsCore.Models.TestModels.DBTestTableModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("I_D")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.HasKey("ID");

                    b.ToTable("TEST_TABLE");
                });

            modelBuilder.Entity("DbModelsCore.Models.Admin.DBUser", b =>
                {
                    b.HasOne("DbModelsCore.Models.Admin.DBUserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("DbModelsCore.Models.Admin.DBUserInfo", b =>
                {
                    b.HasOne("DbModelsCore.Models.Admin.DBUser", "User")
                        .WithMany("UserInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Catalog.DBAttributeItemCategoryMap", b =>
                {
                    b.HasOne("DbModelsCore.Models.Ecommerce.Catalog.DBProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbModelsCore.Models.Ecommerce.Catalog.DBProductAttributeItems", "AttributeItem")
                        .WithMany("AttributeItemCategories")
                        .HasForeignKey("ItemAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeItem");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Catalog.DBCategoryAttributeMaper", b =>
                {
                    b.HasOne("DbModelsCore.Models.Ecommerce.Catalog.DBProductAttribute", "Attribute")
                        .WithMany("CategoryAttributeMapers")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbModelsCore.Models.Ecommerce.Catalog.DBProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Catalog.DBProductAttributeItems", b =>
                {
                    b.HasOne("DbModelsCore.Models.Ecommerce.Catalog.DBProductAttribute", "ProductAttribute")
                        .WithMany("AttributeItems")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Catalog.DBProductCategory", b =>
                {
                    b.HasOne("DbModelsCore.Models.Ecommerce.Catalog.DBProductCategory", "Category")
                        .WithMany("Categories")
                        .HasForeignKey("ParentId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Product.DBProduct", b =>
                {
                    b.HasOne("DbModelsCore.Models.Ecommerce.Catalog.DBProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Product.DBProductAttributeItemMap", b =>
                {
                    b.HasOne("DbModelsCore.Models.Ecommerce.Catalog.DBProductAttributeItems", "AttributeItem")
                        .WithMany()
                        .HasForeignKey("ItemAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbModelsCore.Models.Ecommerce.Product.DBProduct", "Product")
                        .WithMany("ProductAttributeItemMaps")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeItem");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Product.DBProductFeedback", b =>
                {
                    b.HasOne("DbModelsCore.Models.Ecommerce.Product.DBProduct", "Product")
                        .WithMany("DBProductFeedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Product.DBProductTagMap", b =>
                {
                    b.HasOne("DbModelsCore.Models.Ecommerce.Product.DBProduct", "Product")
                        .WithMany("ProductTagMaps")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbModelsCore.Models.Ecommerce.Catalog.DBProductTag", "ProductTag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductTag");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Product.DBProdutImageMap", b =>
                {
                    b.HasOne("DbModelsCore.Models.Ecommerce.Product.DBProduct", "Product")
                        .WithMany("DBProdutImageMaps")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DbModelsCore.Models.Admin.DBUser", b =>
                {
                    b.Navigation("UserInfos");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Catalog.DBProductAttribute", b =>
                {
                    b.Navigation("AttributeItems");

                    b.Navigation("CategoryAttributeMapers");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Catalog.DBProductAttributeItems", b =>
                {
                    b.Navigation("AttributeItemCategories");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Catalog.DBProductCategory", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("DbModelsCore.Models.Ecommerce.Product.DBProduct", b =>
                {
                    b.Navigation("DBProductFeedbacks");

                    b.Navigation("DBProdutImageMaps");

                    b.Navigation("ProductAttributeItemMaps");

                    b.Navigation("ProductTagMaps");
                });
#pragma warning restore 612, 618
        }
    }
}
